#ifndef INCLUDE_TOKENS
#define INCLUDE_TOKENS

#include <stdint.h>

#define MAX_TOKENS 256

typedef enum {
  TOK_NONE,

  TOK_IDENT,
  TOK_DECIMAL,

  TOK_LPAREN,
  TOK_RPAREN,
  TOK_LBRACE,
  TOK_RBRACE,
  TOK_SEMICOLON,
  TOK_MINUS,
  TOK_PLUS,

  TOK_AUTO, TOK_ENUM, TOK_RESTRICT, TOK_UNSIGNED, TOK_BREAK,
  TOK_EXTERN, TOK_RETURN, TOK_VOID, TOK_CASE, TOK_FLOAT,
  TOK_SHORT, TOK_VOLATILE, TOK_CHAR, TOK_FOR, TOK_SIGNED,
  TOK_WHILE, TOK_CONST, TOK_GOTO, TOK_SIZEOF, TOK_BOOL,
  TOK_CONTINUE, TOK_IF, TOK_STATIC, TOK_COMPLEX, TOK_DEFAULT,
  TOK_INLINE, TOK_STRUCT, TOK_IMAGINARY, TOK_DO, TOK_INT,
  TOK_SWITCH, TOK_DOUBLE, TOK_LONG, TOK_TYPEDEF, TOK_ELSE,
  TOK_REGISTER, TOK_UNION,

  TOK_COUNT,
} TokenType;

const char *TOKEN_TYPE_STR[TOK_COUNT] = {
  "TOK_NONE",
  "TOK_IDENT",
  "TOK_DECIMAL",

  "TOK_LPAREN",
  "TOK_RPAREN",
  "TOK_LBRACE",
  "TOK_RBRACE",
  "TOK_SEMICOLON",
  "TOK_MINUS",
  "TOK_PLUS",

  "TOK_AUTO", "TOK_ENUM", "TOK_RESTRICT", "TOK_UNSIGNED", "TOK_BREAK",
  "TOK_EXTERN", "TOK_RETURN", "TOK_VOID", "TOK_CASE", "TOK_FLOAT",
  "TOK_SHORT", "TOK_VOLATILE", "TOK_CHAR", "TOK_FOR", "TOK_SIGNED",
  "TOK_WHILE", "TOK_CONST", "TOK_GOTO", "TOK_SIZEOF", "TOK_BOOL",
  "TOK_CONTINUE", "TOK_IF", "TOK_STATIC", "TOK_COMPLEX", "TOK_DEFAULT",
  "TOK_INLINE", "TOK_STRUCT", "TOK_IMAGINARY", "TOK_DO", "TOK_INT",
  "TOK_SWITCH", "TOK_DOUBLE", "TOK_LONG", "TOK_TYPEDEF", "TOK_ELSE",
  "TOK_REGISTER", "TOK_UNION",
};

typedef struct {
  TokenType type;
  uint16_t len;
  uint32_t start;
} Token;

void tokenize(const char *source, Token tokens_out[MAX_TOKENS]);
void print_tokens(const Token *tokens);

#endif

